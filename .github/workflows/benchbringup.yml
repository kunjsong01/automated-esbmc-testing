name: Run Benchmark with specific binary
on:
  workflow_dispatch:
    inputs:
      benchmark:
        description: 'Benchmark to run (e.g. any benchmark as in esbmc-cpp/<benchmark>)'
        required: true
        default: './esbmc-cpp/script_timeout_test/'
      binary:
        description: 'ESBMC binary'
        required: true
        default: './esbmc_binary/latest_master/esbmc'
      mode:
        description: 'Mode'
        required: true
        default: 'CORE'
      library:
        description: 'C++ OM lib (leave blank for new ESBMC binary)'
        required: false
        default: '-l ./libraries'

jobs:
  build-linux:
    strategy:
      matrix:
        os: [ubuntu-latest]
    name: Run benchmark (${{ matrix.os }})
    runs-on: ${{ matrix.os }}
    timeout-minutes: 90 # 1.5h
    steps:
      - name: Confirm the benchmark
        run: echo ${{ github.event.inputs.benchmark }}
      - name: Confirm the binary
        run: echo ${{ github.event.inputs.binary }}
      - name: Confirm the mode
        run: echo ${{ github.event.inputs.mode }}
      - uses: actions/checkout@v2
      - name: Run benchmark with the given binary
        continue-on-error: true
        run: pwd && unzip /home/runner/work/automated-esbmc-testing/automated-esbmc-testing/esbmc_binary.zip && ls && ./run.sh -r ${{ inputs.benchmark }} -t ${{ inputs.binary }} -m ${{ inputs.mode }} ${{ inputs.library }}
